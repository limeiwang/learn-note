(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{378:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"js-数据类型篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-数据类型篇"}},[t._v("#")]),t._v(" JS-数据类型篇")]),t._v(" "),s("h3",{attrs:{id:"基础类型有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础类型有哪些"}},[t._v("#")]),t._v(" 基础类型有哪些？")]),t._v(" "),s("p",[t._v("基本类型有七种")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("undefined")])]),t._v(" "),s("li",[s("code",[t._v("boolean")])]),t._v(" "),s("li",[s("code",[t._v("number")])]),t._v(" "),s("li",[s("code",[t._v("string")])]),t._v(" "),s("li",[s("code",[t._v("symbol")]),t._v("（较新标准）")]),t._v(" "),s("li",[s("code",[t._v("BigInt")]),t._v("（新标准）")])]),t._v(" "),s("p",[s("code",[t._v("NaN")]),t._v(" 也属于 "),s("code",[t._v("number")]),t._v(" 类型，并且 "),s("code",[t._v("NaN")]),t._v(" 不等于自身")]),t._v(" "),s("h3",{attrs:{id:"基础类型的特性是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础类型的特性是什么"}},[t._v("#")]),t._v(" 基础类型的特性是什么？")]),t._v(" "),s("ol",[s("li",[t._v("基本类型的值是保存在"),s("code",[t._v("栈内存")]),t._v("中的简单数据段")]),t._v(" "),s("li",[t._v("基础类型是"),s("code",[t._v("不可变的")]),t._v(" "),s("ul",[s("li",[t._v("即不能强行修改："),s("code",[t._v("Array.prototype.sort.call('abc');")]),t._v("(会报错)")])])]),t._v(" "),s("li",[t._v("基础类型上没有"),s("code",[t._v("__proto__")]),t._v("没有"),s("code",[t._v("属性")])]),t._v(" "),s("li",[t._v("基础类型可以通过 "),s("code",[t._v("基本包装类型")]),t._v(" 访问的属性/方法"),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过包装类型访问基础类型特性")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当你调用 `str.length` 时，实际过程是这样的：")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> 创建String类型的一个实例")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> 在实例上调用指定的方法")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> 销毁这个实例")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" _str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    _str "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),s("li",[t._v("基础类型默认先访问 "),s("code",[t._v("Symbol.toPrimitive")]),t._v("（在ES6中有），否则调用 "),s("code",[t._v("valueOf")]),t._v(" 和 "),s("code",[t._v("toString")]),t._v("（如果是 String(val) 先调用 toString），当隐式转换出错会提示"),s("code",[t._v("Cannot convert object to primitive value")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("valueOf")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"valueOf"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"toString"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"toPrimitive"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toPrimitive")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello")]),t._v("\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"怎么检测基础类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么检测基础类型"}},[t._v("#")]),t._v(" 怎么检测基础类型？")]),t._v(" "),s("ol",[s("li",[t._v("检测基础类型可以用 "),s("code",[t._v("typeof")]),t._v("，但是 "),s("code",[t._v("typeof null === 'object'")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("null")]),t._v(" 是基础类型，不是 Object")]),t._v(" "),s("li",[t._v("由于null的历史遗留问题(前三位为000)，所以使用"),s("code",[t._v("typeof")]),t._v("检测null会产生BUG")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    // 借鉴 Vue 源码的 object 检测方法\n    function isObject (obj: any): Boolean {\n        return obj !== null && typeof obj === 'object'\n    }\n")])])])]),t._v(" "),s("li",[t._v("通过 "),s("code",[t._v("Object.prototype.toString.call")]),t._v(" （万能方法）\n"),s("ul",[s("li",[t._v("检测 "),s("code",[t._v("[[class]]")])]),t._v(" "),s("li",[t._v("在不覆盖 toString 方法前提下，任何一个对象调用 Object 原生的 toString 方法都会返回 "),s("code",[t._v("[object type]")])])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    // 借鉴 Vue 源码的检测方法\n\n    let _toString = Object.prototype.toString;\n\n    function toRawType (value: any): String {\n        // 获取 从第九个到倒数第二个 字符\n        // 比如 [object String]  获取 String\n        return _toString.call(value).slice(8, -1)\n    }\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"基础类型是如何转换的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础类型是如何转换的"}},[t._v("#")]),t._v(" 基础类型是如何转换的？")]),t._v(" "),s("ol",[s("li",[t._v("基本类型转换时，首先会调用 "),s("code",[t._v("valueOf")]),t._v("，然后调用 "),s("code",[t._v("toString")]),t._v("。(这两个方法可以被重写)")]),t._v(" "),s("li",[t._v("在四则运算中，除了 "),s("code",[t._v("+")]),t._v(" 其他操作都会以数字进行计算，如果是 "),s("code",[t._v("+")]),t._v(" 运算，如果不是所有字面量"),s("strong",[t._v("都是")]),s("code",[t._v("number")]),t._v("（都是number就是数字的加法咯），那么会转换为字符串("),s("code",[t._v("toString")]),t._v(")进行拼接")])]),t._v(" "),s("p",[t._v("ps：类型转换要注意"),s("code",[t._v("undefined")]),t._v("、 "),s("code",[t._v("null")]),t._v("，具体需要遵循 ES3 的转换规律，比如 "),s("code",[t._v("null")]),t._v(" 和 "),s("code",[t._v("0")]),t._v(" 的关系")]),t._v(" "),s("h3",{attrs:{id:"为什么-0-1-0-2-为什么不等于-0-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-0-1-0-2-为什么不等于-0-3"}},[t._v("#")]),t._v(" 为什么 0.1 + 0.2 为什么不等于 0.3 ？")]),t._v(" "),s("p",[t._v("遵循"),s("code",[t._v("IEEE 754 双精度版本（64位）")]),t._v("标准的语言都有的问题。计算机无法识别十进制，JS会将十进制转换为对应的二进制（二进制即："),s("code",[t._v("0")]),t._v(" 和 "),s("code",[t._v("1")]),t._v("）。")]),t._v(" "),s("p",[t._v("那么 怎么用 "),s("code",[t._v("0")]),t._v(" 和 "),s("code",[t._v("1")]),t._v(" 来表示 "),s("code",[t._v("0.1")]),t._v(" 和 "),s("code",[t._v("0.2")]),t._v(" 呢？")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    console.log(0.1.toString(2));\n    // -> 0.0001100110011001100110011001100110011001100110011001101\n\n    console.log(0.2.toString(2));\n    // -> 0.001100110011001100110011001100110011001100110011001101\n")])])]),s("p",[t._v("这样看似没问题啊。为什么会有BUG呢？")]),t._v(" "),s("p",[t._v("别忘了：JS的精确度区间 约为正负 "),s("code",[t._v("2^53")]),t._v("，超出限制会截断。所以你看到的 0.1 不是真的 0.1。")]),t._v(" "),s("h3",{attrs:{id:"那么怎么解决-js-的精确度问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#那么怎么解决-js-的精确度问题"}},[t._v("#")]),t._v(" 那么怎么解决 JS 的精确度问题？")]),t._v(" "),s("ol",[s("li",[t._v("目前主流的解决方案是 "),s("code",[t._v("先乘再除")]),t._v(" "),s("ul",[s("li",[t._v("比如精确到小数点后2位")]),t._v(" "),s("li",[t._v("先把需要计算的数字都 乘1000")]),t._v(" "),s("li",[t._v("计算完成后再把结果  除1000")])])]),t._v(" "),s("li",[t._v("使用新基础类型 "),s("code",[t._v("BigInt")]),t._v(" (兼容性很差)")])]),t._v(" "),s("h3",{attrs:{id:"js的-真-值有哪些"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js的-真-值有哪些"}},[t._v("#")]),t._v(' JS的"真"值有哪些？')]),t._v(" "),s("p",[t._v('JS中除了 "假" 值以外就是 "真" 值。')]),t._v(" "),s("p",[t._v('"假"值包括 7 个')]),t._v(" "),s("ol",[s("li",[s("code",[t._v("undefined")])]),t._v(" "),s("li",[s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("false")])]),t._v(" "),s("li",[s("code",[t._v("NaN")])]),t._v(" "),s("li",[s("code",[t._v("''")])]),t._v(" "),s("li",[s("code",[t._v("0")])]),t._v(" "),s("li",[s("code",[t._v("-0")])])]),t._v(" "),s("p",[t._v('在条件判断的隐式转换中："假" 值会转换为 '),s("code",[t._v("false")]),t._v('，"真" 值会转换为 '),s("code",[t._v("true")]),t._v(";")]),t._v(" "),s("h3",{attrs:{id:"那说一下引用类型吧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#那说一下引用类型吧"}},[t._v("#")]),t._v(" 那说一下引用类型吧？")]),t._v(" "),s("ol",[s("li",[t._v("除了基础类型，都是引用类型。")]),t._v(" "),s("li",[t._v("引用类型正在创建时会分配"),s("code",[t._v("两个空间")]),t._v(" "),s("ul",[s("li",[t._v("一块在"),s("code",[t._v("堆")]),t._v("上，储存引用类型本身的数据（当然数据量会比较大）")]),t._v(" "),s("li",[t._v("一块在"),s("code",[t._v("栈")]),t._v("上，储存对"),s("code",[t._v("堆")]),t._v("上数据的引用（存储堆上的内存地址，也就是指针）")])])]),t._v(" "),s("li",[t._v("引用类型是可变的：即"),s("code",[t._v("let a={}; a.x=1;")])]),t._v(" "),s("li",[t._v("function参数是值传递，要注意不能修改引用")])]),t._v(" "),s("h3",{attrs:{id:"怎么检测引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#怎么检测引用类型"}},[t._v("#")]),t._v(" 怎么检测引用类型？")]),t._v(" "),s("ol",[s("li",[t._v("通过 "),s("code",[t._v("Object.prototype.toString.call")]),t._v(" 检测 "),s("code",[t._v("[[class]]")])]),t._v(" "),s("li",[t._v("通过 "),s("code",[t._v("instanceof")]),t._v(" 判断引用类型")]),t._v(" "),s("li",[t._v("通过 "),s("code",[t._v("constructor")]),t._v(" 判断引用类型（"),s("code",[t._v("constructor")]),t._v("是可写的，慎用）")])]),t._v(" "),s("h3",{attrs:{id:"instanceof-的原理是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-的原理是什么"}},[t._v("#")]),t._v(" instanceof 的原理是什么？")]),t._v(" "),s("p",[s("code",[t._v("instanceof")]),t._v(" 内部机制是通过"),s("strong",[t._v("判断对象的原型链中是不是能找到对应的的"),s("code",[t._v("prototype")])])]),t._v(" "),s("p",[t._v("所以在验证iframe时会有BUG，因为 "),s("code",[t._v("window.Array.prototype !== window.frames[0].Array.prototype")]),t._v("，所以不存在继承关系")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  // 实现 instanceof\n\n  function instanceof(obj, target) {\n      // 获得对象的原型\n      obj = obj.__proto__\n      // 判断对象的类型是否等于类型的原型\n      while (true) {\n        // 如果__proto__ === null 说明原型链遍历完毕\n        if (obj === null) {\n          return false\n        }\n        // 如果存在 obj.__proto__ === target.prototype\n        // 说明对象是该类型的实例\n        if (obj === target.prototype) {\n          return true\n        }\n        // 原型链上查找\n        obj = obj.__proto__\n      }\n  }\n")])])]),s("h3",{attrs:{id:"如果用-instanceof-判断基础类型会怎么样"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果用-instanceof-判断基础类型会怎么样"}},[t._v("#")]),t._v(" 如果用 instanceof 判断基础类型会怎么样？")]),t._v(" "),s("p",[t._v("会返回 "),s("code",[t._v("false")]),t._v(" 因为基础类型没有 "),s("code",[t._v("__proto__")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    let str = '123';\n\n    console.log(str instanceof String) // -> false\n")])])]),s("p",[t._v("但是如果更改了 静态方法"),s("code",[t._v("Symbol.hasInstance")]),t._v("就可以判断了")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    class StringType {\n        static [Symbol.hasInstance](val) {\n            return typeof val === 'string'\n        }\n    }\n    console.log(str instanceof StringType) // -> true\n")])])]),s("h3",{attrs:{id:"说一下数组吧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#说一下数组吧"}},[t._v("#")]),t._v(" 说一下数组吧？")]),t._v(" "),s("p",[t._v("数组是一种类列表对象，其数据在内存中也可以不连续")]),t._v(" "),s("p",[t._v("数组应该是一段线性分配的内存，但是JS的Array的检索和更新方式和对象一模一样")]),t._v(" "),s("ul",[s("li",[t._v("Array它把下标变成"),s("strong",[t._v("数字")]),t._v("，用其作属性。"),s("strong",[t._v("它比真正的数组慢")]),t._v("，但用起来更方便。")]),t._v(" "),s("li",[t._v("Array本质还是对象，其原型继承自"),s("code",[t._v("Array.prototype")]),t._v("，向上再继承自"),s("code",[t._v("Object.prototype")])]),t._v(" "),s("li",[t._v("Array的方法是设计为对象通用的，对象也能调用数组的方法"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    let obj = {\n        '2': 3,\n        '3': 4,\n        'length': 2,\n        'splice': Array.prototype.splice,\n        'push': Array.prototype.push\n    }\n    obj.push(1)\n    obj.push(2)\n\n    console.log(obj);\n    // Object(4) [empty × 2, 1, 2, splice: ƒ, push: ƒ]\n")])])])]),t._v(" "),s("li",[t._v("使用"),s("code",[t._v("delete arr[2]")]),t._v("，并不能减少length，而只是删除了对应的属性（变成empty）")])]),t._v(" "),s("h3",{attrs:{id:"什么是类数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是类数组"}},[t._v("#")]),t._v(" 什么是类数组？")]),t._v(" "),s("ol",[s("li",[t._v("类数组不是数组，通过 "),s("code",[t._v("Array.isArray()")]),t._v(" 会返回 "),s("code",[t._v("false")])]),t._v(" "),s("li",[t._v("类数组通过 "),s("code",[t._v("Array.from")]),t._v(" 可以转换为数组")]),t._v(" "),s("li",[t._v("属性要为索引（数字）属性")]),t._v(" "),s("li",[t._v("必须有length属性")])]),t._v(" "),s("p",[t._v("经常遇见的类数组")]),t._v(" "),s("ul",[s("li",[t._v("字符串\n"),s("ul",[s("li",[t._v("唯一的原生类数组")])])]),t._v(" "),s("li",[s("code",[t._v("arguments")]),t._v(" "),s("ul",[s("li",[t._v("arguments完全可以使用"),s("code",[t._v("...args")]),t._v("代替，这样不定参数就是真数组")]),t._v(" "),s("li",[t._v("arguments在箭头函数中被移除")])])]),t._v(" "),s("li",[t._v("DOM")])]),t._v(" "),s("h3",{attrs:{id:"结果是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结果是什么"}},[t._v("#")]),t._v(" [] == ![] 结果是什么？")]),t._v(" "),s("p",[t._v("类型转换都是先 "),s("code",[t._v("valueOf")]),t._v(" 再 "),s("code",[t._v("toString")]),t._v(";")]),t._v(" "),s("p",[t._v("右边")]),t._v(" "),s("ol",[s("li",[t._v("由于 "),s("code",[t._v("!")]),t._v(" 优先级比 "),s("code",[t._v("==")]),t._v(" 高，先执行 "),s("code",[t._v("!")])]),t._v(" "),s("li",[s("code",[t._v("![]")]),t._v(" 得到 false")]),t._v(" "),s("li",[t._v("进行 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness",target:"_blank",rel:"noopener noreferrer"}},[t._v("相等性判断"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("code",[t._v("false")]),t._v(" 转化为数字 "),s("code",[t._v("0")])])]),t._v(" "),s("p",[t._v("左边")]),t._v(" "),s("ol",[s("li",[t._v("执行 "),s("code",[t._v("[].valueOf()")]),t._v(" 原始值 还是 []")]),t._v(" "),s("li",[t._v("执行 [].toString() 得到 ''")]),t._v(" "),s("li",[s("code",[t._v("''")]),t._v(" 转化为数字 "),s("code",[t._v("0")])])]),t._v(" "),s("p",[t._v("所以："),s("code",[t._v("0 == 0")]),t._v(" ，答案是 "),s("code",[t._v("true")])]),t._v(" "),s("p",[t._v("验证：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    let arr1 = [];\n    let arr2 = [];\n\n    console.log(arr1 == !arr2) // -> true\n\n    arr1.toString = () => {\n        console.log(111)\n        return 1\n    }\n\n    console.log(arr1 == !arr2) \n    // -> 111\n    // -> false\n")])])]),s("h3",{attrs:{id:"和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[t._v("#")]),t._v(" == 和 === 的区别 ？")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("===")]),t._v(" 不进行隐式转换")]),t._v(" "),s("li",[s("code",[t._v("==")]),t._v(" 会进行隐式转换\n"),s("ul",[s("li",[s("code",[t._v('{a: 1} == "[object Object]"')]),t._v(" 左边会执行 "),s("code",[t._v(".toString()")])])])])]),t._v(" "),s("h3",{attrs:{id:"如何让-a-1-a-2-条件成立"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何让-a-1-a-2-条件成立"}},[t._v("#")]),t._v(" 如何让 (a == 1 && a == 2)条件成立？")]),t._v(" "),s("p",[t._v("依然是类型转换逻辑：基础类型通过 "),s("code",[t._v("valueOf")]),t._v(" 进行隐式转换")]),t._v(" "),s("p",[t._v("更改 "),s("code",[t._v("valueOf")]),t._v(" 方法就可以实现")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    let a = {\n        value: 0,\n        valueOf: function() {\n            this.value++;\n            return this.value;\n        }\n    };\n    console.log(a == 1 && a == 2);\n")])])]),s("h3",{attrs:{id:"object-is-和-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-is-和-的区别"}},[t._v("#")]),t._v(" "),s("code",[t._v("Object.is")]),t._v(" 和 === 的区别 ？")]),t._v(" "),s("p",[s("code",[t._v("Object.is(v1, v2)")]),t._v(" 修复了 "),s("code",[t._v("===")]),t._v(" 的一些BUG "),s("code",[t._v("(-0和+0, NaN和NaN)")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("    // === 案例\n    -0 === +0       // -> true\n    NaN !== NaN     // -> false\n\n    Object.is(-0, +0)       // -> false\n    Object.is(NaN, NaN)     // -> true\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);